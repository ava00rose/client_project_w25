/*
   TODO; 
   Not much use of grid (only on 1 css style sheet)
        You do a good job at using % for scaling, but some text is hardcoded (for example, main div in style.css has lots of hardcoded px)
        There is also issues when 700px mobile view is selected. Client has to scroll across the web-page to read it fully. Good example of why more grid should be used!
    nav: only color alone was used to indicate which page user is on.
    When mobile view is resized to 700px, not all 3 column divs show   up simultaneously. The last one is almost always cut off, and this can make the user frustrated.

    Your Tablet or Desktop view should have a media query (min-width)
     evolve to fit the space available and significant changes should be made to reflect the increased screen size, impacting all pages.

    404 page
    Your footer must dynamically update to show the current year using Javascript

    FORM!!This should be something unique for your site. This could involve advanced CSS, Javascript, forms, etc. 

*/

/*skip to main styling*/
/*from rubric: Each page has a "Skip to Main Content" link that only appears when it has focus (using the tab key) and works
               When selected it should jump me to the main tag. 
                Should be hidden upon page load
                When it has focus it becomes visible
                When selected it jumps me to the main tag */
.skip {
    position: absolute; 
    top: -40px;

}
.skip a{ 
    color: white; 
}
.skip:focus {
    top: 20px;
}
/*might want to change */
:focus {
    border: 2px solid;
}

/*Navigation-  
    -All four pages are linked via a common navigation structure that works well for a mobile device
    -Order of navigation elements should stay the same on all of your pages  
    -You use CSS to indicate the current page (Active page) within the links in the navigation
    -Your menu should work for a smaller mobile view 
    -I can easily click on all links and buttons when viewing this site on my mobile device. 
    -Each page should have a unique name (H1) which should match with your title to some degree*/
nav {
        padding: 10px 20px;
  
}
nav ul { 
    margin: 0;
    padding: 0;
    display: flex;  
    justify-content: center;  
    gap: 20px; 
}
nav ul li a { 
    display: inline;
}

nav ul li a {
    color: white; 
}
nav ul li a:hover,
nav ul li a:focus {
    color: #FFCB05; 
}
nav ul li a.active {
    background: #FFCB05; 
    color: #00274C;
} 

/*Footer: You should have a consistent footer across your site - this means your footer should be the same across all of your pages and the information should be the same across all of your pages. */
footer { 
    background: #00274C;
    color: white; 
    padding: 20px 20px; 
    display: flex; 
    justify-content: center;  
}
footer a{ 
    color:white; 
}
header { 
    background-color: #00274C;  
}
header img{ 
    display: block; 
    margin: 0 auto; 
    max-width: 10%;
    height: auto;
    padding: 20px 20px; 
}
header h1{ 
    padding: 20px 20px; 
    background-color: white;  
    display: flex; 
    justify-content: center;  
    font-size: 200%;
}


main {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px; 
    padding: 20px;
    max-width: 1200px; 
    margin: auto; 
}

main div, main section {
    background-color: #f9f9f9; /* Light background */
    padding: 15px;
    border-radius: 8px;
}

/* Make images responsive */
main img {
    width: 100%;  /* Ensures images fit within their div */
    height: auto; 
    border-radius: 5px;
    padding: 0px 0px 0px 20px; 
}

.intro{ 
    grid-column: 1 / span 3; 
}

ul, ol{ 
  padding-left: 20px;   
}

.intro img, .links img{ 
    width: 50%; 
    height: auto; 
    display: block; 
    margin: 0 auto; 

}

.links { 
    grid-column: 1 / span 3; 
}

h2 { 
    padding: 0px 0px 20px 0px; 
}

h3{ 
    padding: 20px 0px 0px 0px; 
}

.intro2 { 
    grid-column: 1/ span 2; 
}

/*An error message: your users need to know right away that they’ve landed on an error page. Make it clear and noticeable so there’s no confusion.

Brand look and feel: ensure that your 404 page reflects your site’s overall design. Keep the same logo, colors, and style so it feels like part of the website and not a mistake.

A light touch: adding a bit of humor or a lighthearted message can make the experience less frustrating for the user. Just be careful not to overdo it.

Link to your best content: provide 3 or 4 links to popular or interesting parts of your site. This can help redirect lost visitors and keep them engaged instead of leaving your website.

Call to action: since your 404 page functions like a landing page, include a CTA (call to action). This could be a signup button, download link, or at the very least, a search box so users can easily find what they’re looking for.
*/
/*404 styling*/
.error{ 
    background-color: #00274C;  
    color: #FFCB05; 
    padding: 20px 20px; 
}
.error h1{ 
    display: flex; 
    justify-content: center;  
    font-size: 1000%;
    padding: 60px 15px; 
}
.error p{ 
    display: flex; 
    justify-content: center;  
    font-size: 200%;
    padding: 20px 20px; 
}
.error a{ 
    color: white; 
    display: flex; 
    justify-content: center;
    padding: 20px 400px; 
}
.error img{ 
    width: 20%;
}

/*form stuff*/
#question-form{
    grid-column: span 3;
}
textarea {
    resize: both;
    width: 100%; 
}
.q_link{ 
    grid-column: span 3;
}